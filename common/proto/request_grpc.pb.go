// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: request.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SharedRegistersClient is the client API for SharedRegisters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SharedRegistersClient interface {
	GetPhase(ctx context.Context, in *GetPhaseReq, opts ...grpc.CallOption) (*GetPhaseRsp, error)
	SetPhase(ctx context.Context, in *SetPhaseReq, opts ...grpc.CallOption) (*SetPhaseRsp, error)
}

type sharedRegistersClient struct {
	cc grpc.ClientConnInterface
}

func NewSharedRegistersClient(cc grpc.ClientConnInterface) SharedRegistersClient {
	return &sharedRegistersClient{cc}
}

func (c *sharedRegistersClient) GetPhase(ctx context.Context, in *GetPhaseReq, opts ...grpc.CallOption) (*GetPhaseRsp, error) {
	out := new(GetPhaseRsp)
	err := c.cc.Invoke(ctx, "/SharedRegisters/GetPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sharedRegistersClient) SetPhase(ctx context.Context, in *SetPhaseReq, opts ...grpc.CallOption) (*SetPhaseRsp, error) {
	out := new(SetPhaseRsp)
	err := c.cc.Invoke(ctx, "/SharedRegisters/SetPhase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SharedRegistersServer is the server API for SharedRegisters service.
// All implementations must embed UnimplementedSharedRegistersServer
// for forward compatibility
type SharedRegistersServer interface {
	GetPhase(context.Context, *GetPhaseReq) (*GetPhaseRsp, error)
	SetPhase(context.Context, *SetPhaseReq) (*SetPhaseRsp, error)
	mustEmbedUnimplementedSharedRegistersServer()
}

// UnimplementedSharedRegistersServer must be embedded to have forward compatible implementations.
type UnimplementedSharedRegistersServer struct {
}

func (UnimplementedSharedRegistersServer) GetPhase(context.Context, *GetPhaseReq) (*GetPhaseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhase not implemented")
}
func (UnimplementedSharedRegistersServer) SetPhase(context.Context, *SetPhaseReq) (*SetPhaseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPhase not implemented")
}
func (UnimplementedSharedRegistersServer) mustEmbedUnimplementedSharedRegistersServer() {}

// UnsafeSharedRegistersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharedRegistersServer will
// result in compilation errors.
type UnsafeSharedRegistersServer interface {
	mustEmbedUnimplementedSharedRegistersServer()
}

func RegisterSharedRegistersServer(s grpc.ServiceRegistrar, srv SharedRegistersServer) {
	s.RegisterService(&SharedRegisters_ServiceDesc, srv)
}

func _SharedRegisters_GetPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharedRegistersServer).GetPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SharedRegisters/GetPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharedRegistersServer).GetPhase(ctx, req.(*GetPhaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SharedRegisters_SetPhase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPhaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SharedRegistersServer).SetPhase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SharedRegisters/SetPhase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SharedRegistersServer).SetPhase(ctx, req.(*SetPhaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SharedRegisters_ServiceDesc is the grpc.ServiceDesc for SharedRegisters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SharedRegisters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SharedRegisters",
	HandlerType: (*SharedRegistersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPhase",
			Handler:    _SharedRegisters_GetPhase_Handler,
		},
		{
			MethodName: "SetPhase",
			Handler:    _SharedRegisters_SetPhase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "request.proto",
}
